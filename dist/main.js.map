{"version":3,"file":"main.js","sources":["../src/tokens/index.ts","../src/ast/index.ts","../src/render/index.ts"],"sourcesContent":["/**\n * md 编辑器思路：\n * 1. string -> token\n * 2. token -> ast\n * 3. ast -> render\n */\n\nclass Token {\n  constructor(public type: string, public value: string) {}\n}\n\ninterface TokenizationStrategy {\n  matches(line: string): boolean\n  tokenize(line: string): Token\n}\n\n// 1～4级标题\nclass HeaderStrategy implements TokenizationStrategy {\n  private regex = /^(#{1,4})\\s+(.*)$/\n\n  matches(line: string): boolean {\n    return this.regex.test(line)\n  }\n\n  tokenize(line: string): Token {\n    const match = line.match(this.regex)!\n    console.log(match)\n\n    return new Token(`header${match[1].length}`, match[2])\n  }\n}\n\nclass Tokenizer {\n  strategies: TokenizationStrategy[] = []\n\n  addStrategy(strategy: TokenizationStrategy) {\n    this.strategies.push(strategy)\n  }\n\n  tokenize(markdown: string): Token[] {\n    const tokens: Token[] = []\n    const lines = markdown.split('\\n')\n    lines.forEach((line) => {\n      let matched = false\n      for (const val of this.strategies) {\n        if (val.matches(line)) {\n          tokens.push(val.tokenize(line))\n          matched = true\n          break\n        }\n      }\n\n      if (!matched) {\n        tokens.push(new Token('paragraph', line))\n      }\n    })\n    return tokens\n  }\n}\n\nconst tokenizer = new Tokenizer()\n\n// 为md语法添加解析策略\ntokenizer.addStrategy(new HeaderStrategy())\n\nexport { tokenizer, Token }\n","import { Token } from '../tokens/index'\n\n// ASTNode 类\nexport class ASTNode {\n  type: string = ''\n  children: ASTNode[] = []\n  value?: string = ''\n\n  constructor(type: string, value?: string) {\n    this.type = type\n    this.value = value\n    this.children = []\n  }\n\n  addChild(node: ASTNode) {\n    this.children.push(node)\n  }\n\n  // 递归打印 AST\n  print(depth: number = 0): void {\n    console.log('  '.repeat(depth) + `${this.type}: ${this.value}`)\n    this.children.forEach((child) => child.print(depth + 1))\n  }\n}\n\n// MarkDownNode 类 -> 此处看似与ASTNode无差，但可用于后续扩展(比如标题锚点ID、文本缩进等)\nclass MarkdownNode extends ASTNode {\n  constructor(type: string, value?: string) {\n    super(type, value)\n  }\n}\n\n// ASTNode工厂类\nclass ASTNodeFactory {\n  static createNode(type: string, value?: string) {\n    return new MarkdownNode(type, value)\n  }\n}\n\ninterface NodeHandler {\n  handle(token: Token): ASTNode\n}\n\nclass HeaderNodeHandler implements NodeHandler {\n  handle(token: Token): MarkdownNode {\n    return new MarkdownNode(token.type, token.value)\n  }\n}\n\nclass ParagraphNodeHandler implements NodeHandler {\n  handle(token: Token): MarkdownNode {\n    return new MarkdownNode(token.type, token.value)\n  }\n}\n\n// 创建处理器注册表\nclass NodeHandlerRegistry {\n  handlers: Map<string, NodeHandler> = new Map()\n\n  registerHandler(type: string, handler: NodeHandler): void {\n    this.handlers.set(type, handler)\n  }\n\n  getHandler(type: string): NodeHandler | undefined {\n    return this.handlers.get(type)\n  }\n}\n\n// 注册对应的事件\nconst nodeHandlerRegistry = new NodeHandlerRegistry()\nnodeHandlerRegistry.registerHandler('header1', new HeaderNodeHandler())\nnodeHandlerRegistry.registerHandler('header2', new HeaderNodeHandler())\nnodeHandlerRegistry.registerHandler('header3', new HeaderNodeHandler())\nnodeHandlerRegistry.registerHandler('header4', new HeaderNodeHandler())\nnodeHandlerRegistry.registerHandler('paragraph', new ParagraphNodeHandler())\n\n// 构建 AST\nexport const buildAST = (tokens: Token[]): ASTNode => {\n  const root = ASTNodeFactory.createNode('root')\n  let currentNode = root\n\n  tokens.forEach((token) => {\n    const handler = nodeHandlerRegistry.getHandler(token.type)\n    if (handler) {\n      const newNode = handler.handle(token)\n      currentNode.addChild(newNode)\n    } else {\n      const textHandler = nodeHandlerRegistry.getHandler('paragraph')!\n      const textNode = textHandler.handle(token)\n      if (textNode) currentNode.addChild(textNode)\n    }\n  })\n\n  return root\n}","/**\n * MarkdownNode: {\n *  type: xxx,\n *  value: xxx,\n *  children: [MarkdownNode1, MarkdownNode2]\n * }\n */\n\nimport { ASTNode } from '../ast'\n\ninterface ASTVisitor {\n  visit(node: ASTNode): string\n}\n\nexport class HTMLRender implements ASTVisitor {\n  visit(node: ASTNode): string {\n    switch (node.type) {\n      case 'header1':\n        return `<h1>${node.value}</h1>`\n      case 'header2':\n        return `<h2>${node.value}</h2>`\n      case 'header3':\n        return `<h3>${node.value}</h3>`\n      case 'header4':\n        return `<h4>${node.value}</h4>`\n      case 'paragraph':\n        return `${node.value}`\n      default:\n        return node.children.map((child) => this.visit(child)).join('')\n    }\n  }\n}\n\nexport const renderAST = (node: ASTNode, renderer: ASTVisitor) => {\n  const toHtmlDOM = () => {\n    return renderer.visit(node)\n  }\n\n  const htmlStr = toHtmlDOM()\n\n  return htmlStr\n}\n"],"names":[],"mappings":"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"}